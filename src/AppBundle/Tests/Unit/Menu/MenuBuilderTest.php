<?php
namespace AppBundle\Tests\Unit\Menu;

use AppBundle\Menu\MainMenuItem;
use AppBundle\Menu\MainMenuManager;
use AppBundle\Menu\MenuBuilder;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-03-17 at 18:52:30.
 */
class MenuBuilderTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var MenuBuilder
     */
    protected $object;

    protected $authorizationChecker;
    protected $translator;
    protected $factory;
    protected $mainMenuManager;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->authorizationChecker = $this->getAuthorizationCheckerMock();
        $this->factory = $this->getFactoryMock();
        $this->translator = $this->getTranslatorMock();
        $this->mainMenuManager = new MainMenuManager([
            new MainMenuItem(
                ['name' => 'test1', 'label' => 'test1'],
                [new MainMenuItem(['name' => 'test2', 'label' => 'test2'])]
            )
        ]);

        $this->object = new MenuBuilder($this->factory, $this->translator, $this->authorizationChecker);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers AppBundle\Menu\MenuBuilder::createMainMenu
     */
    public function testCreateMainMenu()
    {
        $this->object->createMainMenu($this->mainMenuManager);
    }

    /**
     * @covers AppBundle\Menu\MenuBuilder::createLogoutMenu
     * @todo   Implement testCreateLogoutMenu().
     */
    public function testCreateLogoutMenu()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @return \PHPUnit_Framework_MockObject_MockObject
     */
    public function getAuthorizationCheckerMock()
    {
        $mock = $this
            ->getMockBuilder('Symfony\Component\Security\Core\Authorization\AuthorizationCheckerInterface')
            ->getMockForAbstractClass();
        $mock->expects($this->at(0))->method('isGranted')
            ->will($this->returnValue(true));
        $mock->expects($this->at(1))->method('isGranted')
            ->will($this->returnValue(true));
        return $mock;
    }

    /**
     * @return \PHPUnit_Framework_MockObject_MockObject
     */
    public function getTranslatorMock()
    {
        $mock = $this
            ->getMockBuilder('Symfony\Bundle\FrameworkBundle\Translation\Translator')
            ->disableOriginalConstructor()
            ->getMock();
        $mock->expects($this->at(0))->method('trans')->will($this->returnValue('test1'));
        $mock->expects($this->at(1))->method('trans')->will($this->returnValue('test2'));
        return $mock;
    }

    /**
     * @return \PHPUnit_Framework_MockObject_MockObject
     */
    public function getFactoryMock()
    {
        $mock = $this->getMock('Knp\Menu\FactoryInterface');
        $item = $this->getMock('Knp\Menu\ItemInterface');
        $item->expects($this->once())
            ->method('addChild')
            ->will($this->returnValue($this->getMock('Knp\Menu\ItemInterface')));
        $mock->expects($this->at(0))->method('createItem')->will($this->returnValue($item));
        return $mock;
    }


}
